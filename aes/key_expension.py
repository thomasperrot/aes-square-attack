from typing import List

from .common import S_BOX, Word, xor


def key_expension(key: bytes, rounds: int) -> List[Word]:
    if len(key) != 16:
        raise ValueError(f"Wrong key length: {len(key)}")
    expended_key = [key[i : i + len(key) // 4] for i in range(0, len(key), 4)]
    for r in range(1, rounds):
        rot = _rot_word(expended_key[-1])
        sub = _sub_word(rot)
        xored = xor(sub, expended_key[-4])
        first_column = xor(xored, _r_con(r))
        expended_key.append(first_column)
        for _ in range(3):
            expended_key.append(xor(expended_key[-1], expended_key[-4]))
    return expended_key


def _rot_word(word: Word) -> Word:
    if len(word) != 4:
        raise ValueError(f"Wrong word length: {len(word)}")
    return word[1:] + bytes([word[0]])


def _sub_word(word: Word) -> Word:
    if len(word) != 4:
        raise ValueError(f"Wrong word length: {len(word)}")
    return bytes([S_BOX[b] for b in word])


def _r_con(n: int) -> Word:
    if not 0 <= n < 256:
        raise ValueError(f"Wrong n: {n}")
    return bytes([_LOOKUP_TABLE[n], 0, 0, 0])


_LOOKUP_TABLE = [
    0x8D,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
    0x6C,
    0xD8,
    0xAB,
    0x4D,
    0x9A,
    0x2F,
    0x5E,
    0xBC,
    0x63,
    0xC6,
    0x97,
    0x35,
    0x6A,
    0xD4,
    0xB3,
    0x7D,
    0xFA,
    0xEF,
    0xC5,
    0x91,
    0x39,
    0x72,
    0xE4,
    0xD3,
    0xBD,
    0x61,
    0xC2,
    0x9F,
    0x25,
    0x4A,
    0x94,
    0x33,
    0x66,
    0xCC,
    0x83,
    0x1D,
    0x3A,
    0x74,
    0xE8,
    0xCB,
    0x8D,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
    0x6C,
    0xD8,
    0xAB,
    0x4D,
    0x9A,
    0x2F,
    0x5E,
    0xBC,
    0x63,
    0xC6,
    0x97,
    0x35,
    0x6A,
    0xD4,
    0xB3,
    0x7D,
    0xFA,
    0xEF,
    0xC5,
    0x91,
    0x39,
    0x72,
    0xE4,
    0xD3,
    0xBD,
    0x61,
    0xC2,
    0x9F,
    0x25,
    0x4A,
    0x94,
    0x33,
    0x66,
    0xCC,
    0x83,
    0x1D,
    0x3A,
    0x74,
    0xE8,
    0xCB,
    0x8D,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
    0x6C,
    0xD8,
    0xAB,
    0x4D,
    0x9A,
    0x2F,
    0x5E,
    0xBC,
    0x63,
    0xC6,
    0x97,
    0x35,
    0x6A,
    0xD4,
    0xB3,
    0x7D,
    0xFA,
    0xEF,
    0xC5,
    0x91,
    0x39,
    0x72,
    0xE4,
    0xD3,
    0xBD,
    0x61,
    0xC2,
    0x9F,
    0x25,
    0x4A,
    0x94,
    0x33,
    0x66,
    0xCC,
    0x83,
    0x1D,
    0x3A,
    0x74,
    0xE8,
    0xCB,
    0x8D,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
    0x6C,
    0xD8,
    0xAB,
    0x4D,
    0x9A,
    0x2F,
    0x5E,
    0xBC,
    0x63,
    0xC6,
    0x97,
    0x35,
    0x6A,
    0xD4,
    0xB3,
    0x7D,
    0xFA,
    0xEF,
    0xC5,
    0x91,
    0x39,
    0x72,
    0xE4,
    0xD3,
    0xBD,
    0x61,
    0xC2,
    0x9F,
    0x25,
    0x4A,
    0x94,
    0x33,
    0x66,
    0xCC,
    0x83,
    0x1D,
    0x3A,
    0x74,
    0xE8,
    0xCB,
    0x8D,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
    0x6C,
    0xD8,
    0xAB,
    0x4D,
    0x9A,
    0x2F,
    0x5E,
    0xBC,
    0x63,
    0xC6,
    0x97,
    0x35,
    0x6A,
    0xD4,
    0xB3,
    0x7D,
    0xFA,
    0xEF,
    0xC5,
    0x91,
    0x39,
    0x72,
    0xE4,
    0xD3,
    0xBD,
    0x61,
    0xC2,
    0x9F,
    0x25,
    0x4A,
    0x94,
    0x33,
    0x66,
    0xCC,
    0x83,
    0x1D,
    0x3A,
    0x74,
    0xE8,
    0xCB,
    0x8D,
]
