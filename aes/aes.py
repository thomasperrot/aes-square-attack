from typing import List

import numpy as np

from .common import S_BOX, State, Word
from .key_expension import key_expension

N_ROUND = 10


def encrypt(plain_text: bytes, key: bytes, rounds: int = N_ROUND) -> bytes:
    state = np.array(list(plain_text), dtype=int)
    state = np.reshape(state, (4, 4), order="F")
    new_state = transform_state(state, key, rounds=rounds)
    cipher_text = bytes([new_state[i, j] for j in range(0, 4) for i in range(0, 4)])
    return cipher_text


def transform_state(state: State, key: bytes, rounds: int = N_ROUND) -> State:
    key_state = key_expension(key, rounds=rounds + 1)
    round_key = key_state[0:4]
    state = _add_round_key(state, round_key)
    for i in range(1, rounds):
        round_key = key_state[4 * i : 4 * (i + 1)]
        state = _sub_bytes(state)
        state = _shift_rows(state)
        state = _mix_columns(state)
        state = _add_round_key(state, round_key)
    round_key = key_state[4 * rounds : 4 * (rounds + 1)]
    state = _sub_bytes(state)
    state = _shift_rows(state)
    state = _add_round_key(state, round_key)
    return state


def _sub_bytes(state: State) -> State:
    new_state = np.zeros((4, 4), dtype=int)
    for i in range(4):
        for j in range(4):
            new_state[i, j] = S_BOX[state[i, j]]
    return new_state


def _shift_rows(state: State) -> State:
    new_state = np.array(state, dtype=int)
    for i in range(4):
        new_state[i] = np.roll(new_state[i], -i)
    return new_state


def _mix_columns(state: State) -> State:
    new_state = np.array(state, dtype=int)
    for i in range(4):
        a0, a1, a2, a3 = state[:, i]
        new_state[0, i] = MULTIPLICATION_BY_2[a0] ^ MULTIPLICATION_BY_3[a1] ^ a2 ^ a3
        new_state[1, i] = a0 ^ MULTIPLICATION_BY_2[a1] ^ MULTIPLICATION_BY_3[a2] ^ a3
        new_state[2, i] = a0 ^ a1 ^ MULTIPLICATION_BY_2[a2] ^ MULTIPLICATION_BY_3[a3]
        new_state[3, i] = MULTIPLICATION_BY_3[a0] ^ a1 ^ a2 ^ MULTIPLICATION_BY_2[a3]
    return new_state


def _add_round_key(state: State, key: List[Word]) -> State:
    if len(key) != 4:
        raise ValueError(f"Wrong key length: {len(key)}")
    new_state = np.array(state, dtype=int)
    for j in range(4):
        for i in range(4):
            new_state[i][j] ^= key[j][i]
    return new_state


MULTIPLICATION_BY_2 = {
    0: 0,
    1: 2,
    2: 4,
    3: 6,
    4: 8,
    5: 10,
    6: 12,
    7: 14,
    8: 16,
    9: 18,
    10: 20,
    11: 22,
    12: 24,
    13: 26,
    14: 28,
    15: 30,
    16: 32,
    17: 34,
    18: 36,
    19: 38,
    20: 40,
    21: 42,
    22: 44,
    23: 46,
    24: 48,
    25: 50,
    26: 52,
    27: 54,
    28: 56,
    29: 58,
    30: 60,
    31: 62,
    32: 64,
    33: 66,
    34: 68,
    35: 70,
    36: 72,
    37: 74,
    38: 76,
    39: 78,
    40: 80,
    41: 82,
    42: 84,
    43: 86,
    44: 88,
    45: 90,
    46: 92,
    47: 94,
    48: 96,
    49: 98,
    50: 100,
    51: 102,
    52: 104,
    53: 106,
    54: 108,
    55: 110,
    56: 112,
    57: 114,
    58: 116,
    59: 118,
    60: 120,
    61: 122,
    62: 124,
    63: 126,
    64: 128,
    65: 130,
    66: 132,
    67: 134,
    68: 136,
    69: 138,
    70: 140,
    71: 142,
    72: 144,
    73: 146,
    74: 148,
    75: 150,
    76: 152,
    77: 154,
    78: 156,
    79: 158,
    80: 160,
    81: 162,
    82: 164,
    83: 166,
    84: 168,
    85: 170,
    86: 172,
    87: 174,
    88: 176,
    89: 178,
    90: 180,
    91: 182,
    92: 184,
    93: 186,
    94: 188,
    95: 190,
    96: 192,
    97: 194,
    98: 196,
    99: 198,
    100: 200,
    101: 202,
    102: 204,
    103: 206,
    104: 208,
    105: 210,
    106: 212,
    107: 214,
    108: 216,
    109: 218,
    110: 220,
    111: 222,
    112: 224,
    113: 226,
    114: 228,
    115: 230,
    116: 232,
    117: 234,
    118: 236,
    119: 238,
    120: 240,
    121: 242,
    122: 244,
    123: 246,
    124: 248,
    125: 250,
    126: 252,
    127: 254,
    128: 27,
    129: 25,
    130: 31,
    131: 29,
    132: 19,
    133: 17,
    134: 23,
    135: 21,
    136: 11,
    137: 9,
    138: 15,
    139: 13,
    140: 3,
    141: 1,
    142: 7,
    143: 5,
    144: 59,
    145: 57,
    146: 63,
    147: 61,
    148: 51,
    149: 49,
    150: 55,
    151: 53,
    152: 43,
    153: 41,
    154: 47,
    155: 45,
    156: 35,
    157: 33,
    158: 39,
    159: 37,
    160: 91,
    161: 89,
    162: 95,
    163: 93,
    164: 83,
    165: 81,
    166: 87,
    167: 85,
    168: 75,
    169: 73,
    170: 79,
    171: 77,
    172: 67,
    173: 65,
    174: 71,
    175: 69,
    176: 123,
    177: 121,
    178: 127,
    179: 125,
    180: 115,
    181: 113,
    182: 119,
    183: 117,
    184: 107,
    185: 105,
    186: 111,
    187: 109,
    188: 99,
    189: 97,
    190: 103,
    191: 101,
    192: 155,
    193: 153,
    194: 159,
    195: 157,
    196: 147,
    197: 145,
    198: 151,
    199: 149,
    200: 139,
    201: 137,
    202: 143,
    203: 141,
    204: 131,
    205: 129,
    206: 135,
    207: 133,
    208: 187,
    209: 185,
    210: 191,
    211: 189,
    212: 179,
    213: 177,
    214: 183,
    215: 181,
    216: 171,
    217: 169,
    218: 175,
    219: 173,
    220: 163,
    221: 161,
    222: 167,
    223: 165,
    224: 219,
    225: 217,
    226: 223,
    227: 221,
    228: 211,
    229: 209,
    230: 215,
    231: 213,
    232: 203,
    233: 201,
    234: 207,
    235: 205,
    236: 195,
    237: 193,
    238: 199,
    239: 197,
    240: 251,
    241: 249,
    242: 255,
    243: 253,
    244: 243,
    245: 241,
    246: 247,
    247: 245,
    248: 235,
    249: 233,
    250: 239,
    251: 237,
    252: 227,
    253: 225,
    254: 231,
    255: 229,
}
MULTIPLICATION_BY_3 = {
    0: 0,
    1: 3,
    2: 6,
    3: 5,
    4: 12,
    5: 15,
    6: 10,
    7: 9,
    8: 24,
    9: 27,
    10: 30,
    11: 29,
    12: 20,
    13: 23,
    14: 18,
    15: 17,
    16: 48,
    17: 51,
    18: 54,
    19: 53,
    20: 60,
    21: 63,
    22: 58,
    23: 57,
    24: 40,
    25: 43,
    26: 46,
    27: 45,
    28: 36,
    29: 39,
    30: 34,
    31: 33,
    32: 96,
    33: 99,
    34: 102,
    35: 101,
    36: 108,
    37: 111,
    38: 106,
    39: 105,
    40: 120,
    41: 123,
    42: 126,
    43: 125,
    44: 116,
    45: 119,
    46: 114,
    47: 113,
    48: 80,
    49: 83,
    50: 86,
    51: 85,
    52: 92,
    53: 95,
    54: 90,
    55: 89,
    56: 72,
    57: 75,
    58: 78,
    59: 77,
    60: 68,
    61: 71,
    62: 66,
    63: 65,
    64: 192,
    65: 195,
    66: 198,
    67: 197,
    68: 204,
    69: 207,
    70: 202,
    71: 201,
    72: 216,
    73: 219,
    74: 222,
    75: 221,
    76: 212,
    77: 215,
    78: 210,
    79: 209,
    80: 240,
    81: 243,
    82: 246,
    83: 245,
    84: 252,
    85: 255,
    86: 250,
    87: 249,
    88: 232,
    89: 235,
    90: 238,
    91: 237,
    92: 228,
    93: 231,
    94: 226,
    95: 225,
    96: 160,
    97: 163,
    98: 166,
    99: 165,
    100: 172,
    101: 175,
    102: 170,
    103: 169,
    104: 184,
    105: 187,
    106: 190,
    107: 189,
    108: 180,
    109: 183,
    110: 178,
    111: 177,
    112: 144,
    113: 147,
    114: 150,
    115: 149,
    116: 156,
    117: 159,
    118: 154,
    119: 153,
    120: 136,
    121: 139,
    122: 142,
    123: 141,
    124: 132,
    125: 135,
    126: 130,
    127: 129,
    128: 155,
    129: 152,
    130: 157,
    131: 158,
    132: 151,
    133: 148,
    134: 145,
    135: 146,
    136: 131,
    137: 128,
    138: 133,
    139: 134,
    140: 143,
    141: 140,
    142: 137,
    143: 138,
    144: 171,
    145: 168,
    146: 173,
    147: 174,
    148: 167,
    149: 164,
    150: 161,
    151: 162,
    152: 179,
    153: 176,
    154: 181,
    155: 182,
    156: 191,
    157: 188,
    158: 185,
    159: 186,
    160: 251,
    161: 248,
    162: 253,
    163: 254,
    164: 247,
    165: 244,
    166: 241,
    167: 242,
    168: 227,
    169: 224,
    170: 229,
    171: 230,
    172: 239,
    173: 236,
    174: 233,
    175: 234,
    176: 203,
    177: 200,
    178: 205,
    179: 206,
    180: 199,
    181: 196,
    182: 193,
    183: 194,
    184: 211,
    185: 208,
    186: 213,
    187: 214,
    188: 223,
    189: 220,
    190: 217,
    191: 218,
    192: 91,
    193: 88,
    194: 93,
    195: 94,
    196: 87,
    197: 84,
    198: 81,
    199: 82,
    200: 67,
    201: 64,
    202: 69,
    203: 70,
    204: 79,
    205: 76,
    206: 73,
    207: 74,
    208: 107,
    209: 104,
    210: 109,
    211: 110,
    212: 103,
    213: 100,
    214: 97,
    215: 98,
    216: 115,
    217: 112,
    218: 117,
    219: 118,
    220: 127,
    221: 124,
    222: 121,
    223: 122,
    224: 59,
    225: 56,
    226: 61,
    227: 62,
    228: 55,
    229: 52,
    230: 49,
    231: 50,
    232: 35,
    233: 32,
    234: 37,
    235: 38,
    236: 47,
    237: 44,
    238: 41,
    239: 42,
    240: 11,
    241: 8,
    242: 13,
    243: 14,
    244: 7,
    245: 4,
    246: 1,
    247: 2,
    248: 19,
    249: 16,
    250: 21,
    251: 22,
    252: 31,
    253: 28,
    254: 25,
    255: 26,
}
